<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习算法: 朴素贝叶斯篇</title>
      <link href="/2019/07/17/naive-bayes/"/>
      <url>/2019/07/17/naive-bayes/</url>
      
        <content type="html"><![CDATA[<p>朴素贝叶斯是一类很简单的分类算法, 应用场景较多, 如垃圾邮件分类, 输入法中的拼写检查, 文本情感分类等等. 初学朴素贝叶斯时被”朴素”二字迷惑, 认为之所以称之为 “朴素” 时因为算法很 “简单”, 很naive. 实际上, “朴素” 更准确的含义是（特征间的）条件独立性假设, 由于这一假设使得这个算法很 “naive”, 他的引入是为了简化后验概率的计算. 学习算法不能走马观花, 浅尝辄止, 还是得花时间好好琢磨. </p><a id="more"></a><h1 id="贝叶斯公式">1. 贝叶斯公式</h1><p>先补充贝叶斯公式作为预备知识.<br>贝叶斯公式形如下式：<br><img src="bayes-theorem.jpg" alt></p><p>其中$\mathbb{x}$表示样本, $c$表示类别, 贝叶斯公式给出了样本与类别之间的生成关系.<br>更通俗地讲, 假设给定未知样本$\mathbb{x}$,  $c$的可能取值是 ${0, 1, 2, \cdots,  k}$,  则概率</p><script type="math/tex; mode=display">Pr(c=j|\mathbb{x}) = \frac{Pr(\mathbb{x}|c=j) \times Pr(c = j)}{Pr(\mathbb{x})},  \ j=0, 1, \cdots,  k</script><h1 id="朴素贝叶斯算法">2. 朴素贝叶斯算法</h1><p>朴素贝叶斯模型是一类生成模型, 它的生成关系有贝叶斯公式给出, 模型的训练是通过最大化后验概率实现的. </p><h2 id="模型假设">2.1. 模型假设</h2><p>朴素贝叶斯算法的前提假设是特征之间的条件独立性, 即：<br>给定样本$\mathbb{x}=(x_1,  x_2,  \cdots,  x_n)$,  其中$x_i$为第$i$个特征, 则</p><script type="math/tex; mode=display">Pr(\mathbb{x}|c=j) = Pr(c=j) \times \prod\limits_{i}Pr(x_i|c=j)</script><h2 id="算法推导">2.2. 算法推导</h2><p>由贝叶斯公式可知</p><script type="math/tex; mode=display">Pr(c=j|\mathbb{x}) = \frac{Pr(\mathbb{x}|c=j) \times Pr(c = j)}{Pr(\mathbb{x})},  \ j=0, 1, \cdots,  k</script><p>由于对于同一个样本, $Pr(\mathbb{x})$取值总是相同的, 从而</p><script type="math/tex; mode=display">\begin{aligned}    j^{*} &=  \mathop{\arg\max}\limits_{j} \frac{Pr(c = j) \times \prod\limits_{i}Pr(x_i|c = j)}{Pr(\mathbb{x})} \\        & = \mathop{\arg\max}\limits_{j} Pr(c = j) \times \prod\limits_{i}Pr(x_i|c = j)\end{aligned}</script><p>其中,  $j^{*}$即为样本$\mathbb{x}$的预测类别</p><h2 id="算法流程">2.3. 算法流程</h2><p>朴素贝叶斯算法的训练过程就是一个”计数”过程. 具体来说, 它对训练集统计下列两类概率</p><ul><li>先验概率（类概率）<br> <script type="math/tex">Pr(c = j) = \frac{\left| D_{c=j}\right|}{\left| D\right|}</script>,<br> 其中 $\left| D_{c=j}\right|$ 为数据集中的类别 $j$所占的数目,  $\left| D\right|$为数据集的大小</li><li>条件概率（似然）<script type="math/tex; mode=display">Pr(x_i|c = j) = \begin{cases}  \frac{\left| D_{x_i,  c=j} \right| }{\left| D_{c} \right| },  & 若\ x\ 离散,  \\  \frac{1}{\sigma \sqrt{2\pi}}\cdot \exp\left( -\frac{\left( x_i - \mu\right)^2}{2\sigma^2}\right),  & 若\ x\ 连续, \end{cases}</script>其中$\left| D_{x_i,  c=j} \right|$为类别是$j$且取值为$x_i$的样本数量. $\mu, \sigma$分别是特征$x_i$的均值与方差</li></ul><p>朴素贝叶斯算法的整体流程如下图所示:</p><p><img src="https://images.cnblogs.com/cnblogs_com/leoo2sk/WindowsLiveWriter/4f6168bb064a_9C14/1_thumb.png" alt></p><h2 id="注意项">2.4. 注意项</h2><ul><li><p>条件概率连乘积下溢. 若特征数量很多,  则</p><script type="math/tex; mode=display">\prod\limits_{i}Pr(x_i|c=j)</script><p>越接近0. 这种现象称为乘法下溢. 为改进之,  可使用对数似然,  即计算</p><script type="math/tex; mode=display">LL\left( \mathbb{x}|c= j\right) = \log(Pr(c=j)) + \sum\limits_{i}\log(Pr(x_i|c=j))</script></li><li><p>未登录词.  若带预测样本中出现了训练集中从未出现过的特征取值,  则后验概率总为0,  为了克服这一点,  可以引入拉普拉斯平滑,  即计算</p><script type="math/tex; mode=display">\hat {Pr}(c = j) = \frac{\left| D_{c=j}\right| + \lambda}{\left| D\right| + N_j \cdot \lambda} \\  \hat {Pr}(\mathbb{x}) = \frac{\left| D_{x_i,  c=j} \right|  + \lambda}{\left| D_{c} \right| + N_{i} \cdot \lambda}</script><p>其中,  $N_j$为类别$j$的数量,  $N_{i}$为特征$x_i$的可能取值数目,  $\lambda$为大于0的常数,  常取值为1</p></li></ul><h1 id="总结">3. 总结</h1><ol><li><p>朴素贝叶斯算法的主要优点：</p><ul><li>对小规模的数据表现很好, 能个处理多分类任务, 适合增量式训练, 尤其是数据量超出内存时, 我们可以一批批的去增量训练. </li><li>对缺失数据不太敏感, 常用于文本分类</li><li>不受特征尺度的影响, 由于训练过程就是计数的过程, 从而无需归一化等操作</li></ul></li><li><p>朴素贝叶斯的主要缺点：</p><ul><li>需要知道先验概率, 且先验概率很多时候取决于假设, 假设的模型可以有很多种, 因此在某些时候会由于假设的先验模型的原因导致预测效果不佳</li><li>由于我们是通过先验和数据来决定后验的概率从而决定分类, 所以分类决策存在一定的错误率</li></ul></li><li><p>使用朴素贝叶斯算法时的注意点：</p><ul><li>贝叶斯分类器与一般意义上的”贝叶斯学习”不同,  前者是通过最大后验概率进行单点估计,  后者是进行分布估计</li><li>没有平滑之前的朴素贝叶斯算法使用的是极大似然估计,  属于频率派,  平滑之后的进行的是贝叶斯估计,  属于贝叶斯学派</li><li>使用对数似然和拉普拉斯平滑是两种不错的改进方式</li></ul></li></ol><h1 id="参考资源">4. 参考资源</h1><ol><li><a href><i class="fa fa-book"></i> 周志华, 机器学习</a></li><li><a href="https://www.cnblogs.com/pinard/p/6069267.html" target="_blank" rel="noopener"><i class="fa fa-book"></i> 朴素贝叶斯算法原理小结</a></li><li><a href="https://www.cnblogs.com/leoo2sk/archive/2010/09/17/naive-bayesian-classifier.html" target="_blank" rel="noopener"><i class="fa fa-book"></i> 算法杂货铺——分类算法之朴素贝叶斯分类(Naive Bayesian classification)</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>learn-xgb</title>
      <link href="/2019/06/01/learn-xgb/"/>
      <url>/2019/06/01/learn-xgb/</url>
      
        <content type="html"><![CDATA[<p>GBDT是一个加法模型，其基模型是决策树，所以名字中带着DT，使用的优化方式是梯度提升，所以名字中带有GB. GDBT类模型如xgb, lgb, catboost, thunderboost都是GBDT的改进版本</p><h2 id="基本推导">0.1. 基本推导</h2><p>GBDT的基本形式： </p><h2 id="XGB">0.2. XGB</h2><script type="math/tex; mode=display">J^{(t-1)} = \sum_{j \in T}\left[\left( \sum_{i \in I_j} g_i\right)w_j + \frac{1}{2}\left(\sum_{i \in I_j}h_i + \lambda \right)w_j^2 \right] + \gamma T \\ = \sum_{j \in T}\left[G_jw_j + \frac{1}{2}\left(H_j + \lambda \right)w_j^2 \right] + \gamma T</script><p>其中 G_j 是落入第\(j\)个叶节点的样本一阶梯度之和， H_j 是落入第\(j\)个叶节点的样本的二阶梯度之和，<br>对于式</p><script type="math/tex; mode=display">G_jw_j + \frac{1}{2}\left(H_j + \lambda \right)w_j^2</script><script type="math/tex; mode=display">w_j</script><p>相当于自变量</p><script type="math/tex; mode=display">x</script><p>从而 </p><script type="math/tex; mode=display">w_j = -\frac{G_i}{H_j + \lambda}$$ 时该式取得最小值，将其带入目标函数中，得到$$J^{(t)} = -\frac{1}{2}\sum_{j=1, \cdots , T}\frac{G_j^2}{H_j + \lambda} + \gamma T</script><h2 id="参考资料">0.3. 参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/30339807" target="_blank" rel="noopener">GBDT的原理和应用</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyterlab交互式环境配置</title>
      <link href="/2019/05/30/setup-jupyterlab-interactive-computational-envs/"/>
      <url>/2019/05/30/setup-jupyterlab-interactive-computational-envs/</url>
      
        <content type="html"><![CDATA[<h1 id="安装jupyter-notebook">1. 安装jupyter notebook</h1><ol><li>插件 table of content 用于为长文本生成目录</li><li>一些color scheme, background image 之类 </li></ol><h1 id="安装jupyter-lab">2. 安装jupyter lab</h1><ol><li>为jupyter lab 安装插件<ul><li><a href="https://github.com/pixiedust/pixiedust" target="_blank" rel="noopener">pixiedust</a>: IBM的notebook debugger</li><li>安装 <a href="https://github.com/lckr/jupyterlab-variableInspector" target="_blank" rel="noopener">jupyterlab-variableInspector</a> 用于更快捷地观察变量, 妈妈再也不用担心我整天print变量了</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指offter笔记</title>
      <link href="/2019/03/03/sword-to-offer/"/>
      <url>/2019/03/03/sword-to-offer/</url>
      
        <content type="html"><![CDATA[<h1 id="面试流程">1. 面试流程</h1><ul><li>电话面试</li><li>远程面试</li><li>现场面试</li></ul><p>在电话面试中，要用尽可能简洁和形象化的语言讲述问题；</p><p>在远程面试中，重点考察的是编码的能力，要注意以下三点：</p><ul><li>想清楚再写</li><li>使用单元测试</li><li>注意代码风格<br>在编码之前，应该先写写单元测试（或构造一些边界情况）</li></ul><p>现场面应该注意： </p><ol><li>提前规划好路线及估算好时间，预留30min作缓冲</li><li>提前追备好几个问题问面试官</li></ol><h1 id="一场面试中的环节">2. 一场面试中的环节</h1><ol><li>自我介绍 (30s - 1min)</li><li>项目经历 (5min - 10min)</li><li>技术考察 (40min - 50min)</li><li>应聘者提问 (~5min)</li></ol><h2 id="自我介绍">2.1. 自我介绍</h2><p>暖场用</p><h2 id="项目经历">2.2. 项目经历</h2><p>建议使用以下的框架讲述自己的项目经历</p><ul><li>Situation (简述项目的背景，如规模，功能，目标群体等等)</li><li>Task (已完成的任务，注意用词：参与 vs  负责)</li><li>Action (做了什么工作，怎么做的)</li><li>Result (自己的贡献，完成了多少的功能，做了多少的优化，提升了多少的功能)</li></ul><p>常见套路：</p><ul><li>项目中遇到的最大的问题是什么？如何克服的？</li><li>从这个项目中学到了什么？</li><li>团队协作中遇到过什么问题？如何解决的？</li><li>为什么跳槽/为什么选择与本专业不同的职业？</li></ul><p>回答为什么跳槽这类的问题，模板：在原来的工作岗位上没有了激情，寻求新环境改变、提升自己. 比如说自己在原工作上做了好多年，技能上没有了上升的空间，寻找<br>一家新的公司获得提升.</p><h2 id="技术考察">2.3. 技术考察</h2><p>通常是题目的考察。一定要注意，在写代码之前先和面试官沟通好，明确题意是什么，再讲述自己的解题思路，还要说说自己构造的测试用例，体现自己思考问题的严谨性与全面性。</p><h2 id="应聘者提问">2.4. 应聘者提问</h2><p>不要问什么公司未来的发展战略的问题，作为一线的开发者，问问关于自身岗位的问题，也不要去谈薪资，谈你是否会给我offer之类的问题.</p><h1 id="面试能力的考察">3. 面试能力的考察</h1><ul><li>沟通能力</li><li>学习能力</li></ul><p>在沟通能力中，常见的套路是面试官提出一个描述并不清楚的问题，试图让面试者通过反复的沟通理解题意。从而，面试者要有主动沟通的意识<br>在考察学习能力方面，常见的两个套路：1. 最近在看什么书或项目？2. 试图让面试者解决他所不熟悉的领域问题，或者一个新概念，让面试者试图解决问题。<br>沟通能力和学习能力的考察常常交织在一起，要注意灵活应对。</p><h1 id="总结">4. 总结</h1><ul><li>主动沟通意识</li><li>想清楚再写</li><li>先和面试官讲清楚解题的思路</li><li>进行单元测试</li></ul><h1 id="参考资料">5. 参考资料</h1><ul><li>何海涛. 剑指offer第二版</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>堆与堆排序</title>
      <link href="/2019/02/27/heap-heapsort/"/>
      <url>/2019/02/27/heap-heapsort/</url>
      
        <content type="html"><![CDATA[<p>作为三大经典排序算法的堆排序，借助了堆这种精巧的数据结构，实现了排序. 理解了堆结构，再理解堆排序就不难了. </p><a id="more"></a><p>堆排序中三点要重点掌握：</p><ul><li>怎样通过下标找到节点的父节点及子节点</li><li>建堆算法</li><li>堆调整算法</li></ul><h1 id="什么是堆">1. 什么是堆</h1><p>堆是一种数据结构，能够支持高效的操作.堆得一种经典实现是使用完全二叉树，这种实现也被称为完全二叉堆.事实上，堆的树结构只是它的一种逻辑结构，也就是画在纸的，在我们脑海中想象出来的，实际内存中的物理结构，常常是使用数组. 有时候堆也被称为<em>优先级队列</em>，这是它的逻辑上的名字，别人用起来就好像是这种结构具有某种优先级.一般来说，堆分两种: 大根堆和小根堆.作为一种数据结构，考察堆的增删改查操作.修改在堆中并不常见，忽略. 查找操作也只限定在查找最大值/最小值上. 增加操作通常加在堆的最后，删除操作通常删除根节点.</p><h1 id="堆与数组的转化">2. 堆与数组的转化</h1><p>堆结构和数组具有很好的对应，即给定一个规模为n的二叉堆，给堆得层序遍历序列对应的就是一个数组，大小同样为n. 从而，有了一个数组，就能把这个数组当成堆来用.使用三个公式即可找到任意节点i的父节点，左节点和右节点（如果有的话）. 假设大小为n的数组arr，下标记为$i = 0, 1, \cdots, n - 1$, 则其左节点的下标为 $2 \cdot i + 1$, 其右节点（如果有）的下标为 $2 \cdot i + 2$, 对于下标为j的节点，其父节点的下标为 $(j - 1) / 2$, 注意当$j = 0$ 时 其父节点时自身，$(0 - 1) / 2 = 0$ 不会越界.</p><h1 id="建堆与维护堆">3. 建堆与维护堆</h1><p>堆中，最重要的两种操作是：建堆和维护堆.建堆是指给定一组数据，比如就是一个数组，通过某种算法将其调整为一个堆（调整操作也就是调整数组中元素的位置）；维护堆是指当增删后的堆不再是一个堆时，用某种算法将其再次调整为一个合法的堆.一个合法的堆是指该堆满足<strong>堆序性</strong>，对于大根堆，堆序性是指根节点是堆中最大值，对于小根堆，定义类似.</p><p>已知对于一棵高度为h的满二叉树，其规模$n = 2^{(h + 1)}- 1$, 即 $h = O(\log n)$，</p><p>下面讨论建堆算法和堆调整算法.</p><h2 id="建堆">3.1. 建堆</h2><h3 id="最开始的思路">3.1.1. 最开始的思路</h3><p>任意给定一个大小为n的数组，从零位置的元素出发，即从空堆出发，不断将新元素加入堆中，堆的增加操作复杂度为O(logn), 从而要建立一个大小为n的堆，复杂度为：</p><script type="math/tex; mode=display">\log 1 + \log 2 + ... + \log n = O(n\log n)</script><p>更细致的复杂度分析，假定一个规模为n的堆高度是h, 则该堆中第i层的节点个数是2^i, 其中 0 &lt;= i &lt; h, 建堆需要每一个元素i都上溯，则复杂度：</p><script type="math/tex; mode=display">1 \cdot 2^1 + 2 \cdot 2^2 + ... + h \cdot 2^h = O(n \log n)</script><h3 id="Floyd算法">3.1.2. Floyd算法</h3><p>算法一过于复杂，建堆就需要O(nlogn)，还不如使用快排或归排.我们需要一个更高效的算法. 从相反的思路考虑，假设堆已经建好了，我们需要做的是调整堆，即下沉操作.时间复杂度： </p><script type="math/tex; mode=display">(h - 1) \cdot 2^1 + (h - 2) \cdot 2^2 + ... + (h - h) \cdot 2^h = O(n)</script><p>Done!</p><h2 id="维护堆">3.2. 维护堆</h2><p>堆的维护发生在增加或删除操作之后.</p><p>对于增加操作，新元素被添加至树的最后一层，最坏情况下该元素需要O(logn)次操作上溯至根节点的位置，才能保证对的合法性；对于删除操作，根节点被删除，堆的最后一个节点被移至根节点的位置，最多需要O(logn)次操作下沉至最后一层，才能保证新堆的合法性.</p><p>综上，堆的调整算法复杂度是O(logn).</p><h1 id="堆排序">4. 堆排序</h1><p>有了堆结构，排序就变得很简单了.只需O(1)的辅助空间，O(nlogn)的时间就能实排序.给定一个无序数组，该数组被看作是  [堆(无序区) | 有序区]， 堆排序的过程就是不断交换无序区中的首尾元素（等效于弹出最大值，然后用末元素顶替根元素）， 由此堆不再合法，调用调整算法使其重新称为一个合法堆， 此番操作后有序区扩大，无序区收缩，反复这个过程，遇到空堆时算法终止·</p><p>复杂度分析: 堆中n个元素都历经交换和堆调整算法，耗时O(logn)，从而最终复杂度为 O(nlogn).</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>周志华《机器学习》读书笔记</title>
      <link href="/2018/03/04/zzh-ML/"/>
      <url>/2018/03/04/zzh-ML/</url>
      
        <content type="html"><![CDATA[<h2 id="chapter-2-模型选择和评估">0.1. chapter 2. 模型选择和评估</h2><p>Q1：什么模型才是好的模型？<br>A1：泛化能力强的（即泛化误差小的）模型是更好的模型</p><p>Q2：怎样知道模型的泛化能力？<br>A2：思路：将数据集分为训练/验证集，在训练集上训练模型，在验证集上跑模型得到的预测误差近似认为是泛化误差</p><p>Q3：具体来说，应该怎样对数据集进行划分？<br>A3：常用三种划分方法：</p><ol><li>hand-out: 直接按比例划分</li><li>k-fold：k折交叉验证，特殊形式：留一法</li><li>boostrap sampling: 放回抽样</li></ol><p>Q4：如何度量模型的预测误差？（怎样才能判断一个模型表现得更好？）<br>A4：有很多的量化指标可以用来度量模型的误差，常用的有：错误率、正确率、查全率、查准率、F-1、<br>ROC、AUC、confusion matrix、cost matrix、F-beta、cost-sensitive curve、P-R图、BEP、cost curve等等</p><p>[Notes]</p><ol><li>过拟合无法避免，我们只能缓解或是降低其发生的风险</li><li>训练/验证集要能够充分反映数据的原始规律</li><li>在不少的应用任务中，参数调得好不好往往对最终模型性能有着关键性影响</li><li>同一算法，不同参数，会产生不同的模型；不同算法，不同参数，会产生更多不同的模型</li></ol><p>[Tips]</p><ol><li>在验证集上进行完了模型选择和调参后，记得要在全体数据集（训练+验证集）上在跑一遍模型</li><li>直观理解查全率、查准率、F-1（P30）</li><li>记住 bias-varance 平衡的那张图</li></ol><h2 id="chapter-3-线性模型">0.2. chapter 3. 线性模型</h2><p>Q1：什么是线性模型？什么是广义线性模型？<br>A1：线性模型：形如 y_hat = W_T<em>X+b<br>广义线性模型：形如 y_hat = g(W_T</em>X+b)</p><p>Q2：怎样从二分类问题推广到多分类问题？<br>A2：思路：通过组合多个二分类器，得到一个多分类器<br>具体：</p><ol><li>OVO：对于N个类别，训练 N(N-1)/2 个分类器</li><li>OVR：对于N个类别，训练 N 个分类器</li><li>MvM: 常用 ECOC技术</li></ol><p>Q3：怎样处理类别不平衡问题？<br>A3：</p><ol><li>欠抽样（undersampling）: 丢弃样本（但是不能随便丢弃，否则会丢失重要信息）</li><li>过抽样（oversampling）: 增加样本（但是不能简单重复，否则会造成过拟合）</li><li>阈值移动（threshold-moving）: 再缩放/再平衡</li></ol><h2 id="chapter-4-决策树">0.3. chapter 4. 决策树</h2><p>Q1：什么是决策树？<br>A1：形如 【此处应该有图】</p><p>Q2：怎样生成一棵决策树？<br>A2：不同的算法基于不同的原则，如ID3基于信息增益原则，C4.5基于增益率原则，CART基于基尼指数</p><p>Q3：怎样对决策树进行剪枝？<br>A3：常用两种剪枝策略：<br>1、预剪枝：训练时间短，但易于欠拟合<br>2、后剪枝：训练时间长，但不易欠拟合</p><p>Q4：怎样处理缺失值和连续值？<br>A4：缺失值：C4.5<br>连续值：连续变量离散化，常用二分法</p><p>[Notes]</p><ol><li>为了生成一棵决策树，就要合理的选择特征作为一系列的决策变量，为了怎样合理的选择特征这一问题，诞生了一系列的决策树算法</li><li>信息增益原则对可取值数目较多的特征有偏好；增益率原则对于可取值数目较少的特征有偏好</li><li>决策树决定的决策边界有一个明显的特征：轴平行</li><li>单决策树：【此处应该有图】；多变量决策树：【此处应该有图】</li></ol><p>chapter 8. 集成学习（模型融合）<br>Q1：什么是模型融合？<br>A1：通过某种方式训练和组合多个模型，最终得到一个总的模型</p><p>Q2：为什么模型融合是可行的？<br>A2：“好而不同”的单个模型，通过某种有效的方式组合在一起，是有可能得到一个比单模型更好的融合模型</p><p>Q3：都有哪些模型融合的方法？<br>A3：1、Boosting（串行）：【此处应该有图】<br>2、Bagging（并行）: 【此处应该有图】</p><p>Q4：什么是Boosting？<br>A4：STEP1. 先从初试训练集训练出一个单模型<br>STEP2. 根据单模型的表现对训练数据分布进行调整，使得先前单模型做错的样本在后续的训练中得到更多的关注<br>STEP3. 根据调整后的训练数据训练下一个单模型，返回STEP2，直到训练得到了总共T个单模型<br>STEP4. T个单模型加权平均</p><p>Q5：什么是Bagging？<br>A5：STEP1. 采样出T个训练数据集<br>STEP2. 基于各个采样集单独训练模型<br>STEP3. 模型融合</p><p>Q6：怎样组合多个单模型？<br>A6：常用1、平均法，2、投票法，3、学习法（stacking）</p><p>Q7：什么是模型间的差异性？<br>A7：模型的多样性（差别有多么的大）</p><p>Q8：怎样进行差异性的度量？<br>A8：成对型差异性度量指标，有助于绘图观察：不合度量，相关系数，Q-统计量，k-统计量</p><p>Q9：怎样增强模型间的差异性？<br>A9：有如下几种常用方法：1、数据样本扰动，2、特征扰动，3、输出扰动，4、算法参数扰动</p><p>[Notes]</p><ol><li>模型融合中的核心问题：1、怎样训练多个单模型？2、怎样组合多个单模型？</li><li>Boosting主要关注降低偏差；Bagging主要关注降低方差；</li><li>RF中的k同时使用了数据样本扰动和特征扰动两种方式，且k一般取log_2(d), d是特征的维数</li><li>不稳定模型（对数据敏感）：决策树、神经网络<br>稳定模型（对数据不敏感）：SVM、朴素贝叶斯、KNN、线性分类器</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便想想</title>
      <link href="/2017/05/23/idea001/"/>
      <url>/2017/05/23/idea001/</url>
      
        <content type="html"><![CDATA[<p>学习一门编程语言的步骤：</p><ol><li>语法规则，数据结构，控制结构</li><li>库</li><li>大量的编程实践</li><li>源码</li></ol><p>其中1为入门，2、3为进阶，4为高阶</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python tutorial 摘录</title>
      <link href="/2017/05/22/pydoc01/"/>
      <url>/2017/05/22/pydoc01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">0.1. 前言</h2><p>学习Python良久，想全面的回顾一下Python的基础知识，于是阅读了Python3.4的官方教程；在这里做要点的摘录，只为提纲挈领，对细节不做过多的解释。</p><h2 id="Control-Flow-Tools">0.2. Control Flow Tools</h2><p>坑</p><h2 id="Data-Structures">0.3. Data Structures</h2><p>list, dict, set, tuple, str</p><h3 id="More-on-Lists">0.3.1. More on Lists</h3><ol><li>methods:<br>append(x), extend(L), insert(i, x), remove(x), pop([i]), clear(), index(x), count(x), sort(), reverse(), copy()</li><li>Using Lists as Stacks(OK)</li><li>Using Lists as Queues(Not efficient) -&gt; Using collections.deque</li></ol><h3 id="Comprehensions">0.3.2. Comprehensions</h3><p>List/Set/Dictionary Comprehensions</p><h3 id="Looping-Techniques">0.3.3. Looping Techniques</h3><ol><li>Using the <code>items()</code> method to loop over dictionaries</li><li>Using the <code>enumerate()</code> function to loop over a sequence</li><li>Using the <code>zip()</code> function to loop over two or more sequences at the same time</li><li>Using the <code>reversed()</code> function to loop over a sequence in reverse</li><li>Using the  <code>sorted()</code> function to loop over a sequence in sorted order</li></ol><h3 id="Comparing-Sequences-and-Other-Types">0.3.4. Comparing Sequences and Other Types</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)              &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]              &lt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="string">'ABC'</span> &lt; <span class="string">'C'</span> &lt; <span class="string">'Pascal'</span> &lt; <span class="string">'Python'</span> <span class="comment"># Comparisons can be chained</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)           &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)                 &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)             == (<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, (<span class="string">'aa'</span>, <span class="string">'ab'</span>))   &lt; (<span class="number">1</span>, <span class="number">2</span>, (<span class="string">'abc'</span>, <span class="string">'a'</span>), <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="Modules-and-Packages">0.4. Modules and Packages</h2><h2 id="Input-and-Output">0.5. Input and Output</h2><h3 id="Fancier-Output-Formatting">0.5.1. Fancier Output Formatting</h3><ul><li>The str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>    print(repr(x).rjust(<span class="number">2</span>), repr(x*x).rjust(<span class="number">3</span>), end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="comment"># Note use of 'end' on previous line</span></span><br><span class="line"><span class="meta">... </span>    print(repr(x*x*x).rjust(<span class="number">4</span>))</span><br><span class="line">...</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;'</span>.format(x, x*x, x*x*x))</span><br><span class="line">...</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><ul><li>str.format()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'We are the &#123;&#125; who say "&#123;&#125;!"'</span>.format(<span class="string">'knights'</span>, <span class="string">'Ni'</span>))</span><br><span class="line">We are the knights who say <span class="string">"Ni!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'This &#123;food&#125; is &#123;adjective&#125;.'</span>.format(</span><br><span class="line"><span class="meta">... </span>      food=<span class="string">'spam'</span>, adjective=<span class="string">'absolutely horrible'</span>))</span><br><span class="line">This spam <span class="keyword">is</span> absolutely horrible.</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'The story of &#123;0&#125;, &#123;1&#125;, and &#123;other&#125;.'</span>.format(<span class="string">'Bill'</span>, <span class="string">'Manfred'</span>,other=<span class="string">'Georg'</span>))</span><br><span class="line">The story of Bill, Manfred, <span class="keyword">and</span> Georg.</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">7678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, phone <span class="keyword">in</span> table.items():</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;0:10&#125; ==&gt; &#123;1:10d&#125;'</span>.format(name, phone))</span><br><span class="line">...</span><br><span class="line">Jack       ==&gt;       4098</span><br><span class="line">Dcab       ==&gt;       7678</span><br><span class="line">Sjoerd     ==&gt;       4127</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Jack: &#123;0[Jack]:d&#125;; Sjoerd: &#123;0[Sjoerd]:d&#125;; '</span></span><br><span class="line"><span class="meta">... </span>      <span class="string">'Dcab: &#123;0[Dcab]:d&#125;'</span>.format(table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Jack: &#123;Jack:d&#125;; Sjoerd: &#123;Sjoerd:d&#125;; Dcab: &#123;Dcab:d&#125;'</span>.format(**table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Class">0.6. Class</h2><h3 id="A-word-About-Names-and-Objects">0.6.1. A word About Names and Objects</h3><p>Aliasing has a possibly surprising effect on the semantics of Python code involving mutable objects such as lists, dictionaries, and most other types.</p><h3 id="Python-Scopes-and-Namespaces">0.6.2. Python Scopes and Namespaces</h3><h3 id="Odds-amp-Ends">0.6.3. Odds &amp; Ends</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">john = Employee() <span class="comment"># Create an empty employee record</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill the fields of the record</span></span><br><span class="line">john.name = <span class="string">'John Doe'</span></span><br><span class="line">john.dept = <span class="string">'computer lab'</span></span><br><span class="line">john.salary = <span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="Iterator-amp-Generator">0.6.4. Iterator &amp; Generator</h3><h4 id="Iterator">0.6.4.1. Iterator</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = iter(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;iterator object at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "&lt;stdin&gt;", line 1, in ?</span><br><span class="line">    next(it)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><h4 id="Generator">0.6.4.2. Generator</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(data)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> data[index]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">'golf'</span>):</span><br><span class="line"><span class="meta">... </span>    print(char)</span><br><span class="line">...</span><br><span class="line">f</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line">g</span><br></pre></td></tr></table></figure><h4 id="Generator-Expressions">0.6.4.3. Generator Expressions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))                 <span class="comment"># sum of squares</span></span><br><span class="line"><span class="number">285</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xvec = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yvec = [<span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x*y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(xvec, yvec))         <span class="comment"># dot product</span></span><br><span class="line"><span class="number">260</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi, sin</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sine_table = &#123;x: sin(x*pi/<span class="number">180</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">91</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unique_words = set(word  <span class="keyword">for</span> line <span class="keyword">in</span> page  <span class="keyword">for</span> word <span class="keyword">in</span> line.split())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>valedictorian = max((student.gpa, student.name) <span class="keyword">for</span> student <span class="keyword">in</span> graduates)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="string">'golf'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(data[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>))</span><br><span class="line">[<span class="string">'f'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><h2 id="Brief-Tour-of-Standard-Library">0.7. Brief Tour of Standard Library</h2><p>坑</p><h2 id="Reference">0.8. Reference</h2><p><a href="https://docs.python.org/3.4/tutorial/index.html" target="_blank" rel="noopener">The Python Tutorial</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python对象持久化</title>
      <link href="/2017/05/16/a-byte-of-pyhton-note-01/"/>
      <url>/2017/05/16/a-byte-of-pyhton-note-01/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象">1. 面向对象</h1><p>  python 并不会自动调用超类的构造函数！需要编程者自己显示的调用</p><h1 id="对象持久化">2. 对象持久化</h1><h2 id="dump-amp-load">2.1. dump &amp; load</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: pickling.py</span></span><br><span class="line"><span class="keyword">import</span> cPickle <span class="keyword">as</span> p</span><br><span class="line"><span class="comment">#import pickle as p</span></span><br><span class="line"></span><br><span class="line">shoplistfile = <span class="string">'shoplist.data'</span> <span class="comment"># the name of the file where we will store the objec</span></span><br><span class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</span><br><span class="line"><span class="comment"># Write to the file</span></span><br><span class="line">f = open(shoplistfile, <span class="string">'w'</span>)</span><br><span class="line">p.dump(shoplist, f) <span class="comment"># dump the object to a file</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> shoplist <span class="comment"># remove the shoplist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read back from the storage</span></span><br><span class="line">f = open(shoplistfile, <span class="string">'r'</span>)</span><br><span class="line">storedlist = p.load(f)</span><br><span class="line"><span class="keyword">print</span> storedlist</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h1 id="参考资料">3. 参考资料</h1><ol><li>a byte of python</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thinking in Java 笔记 01</title>
      <link href="/2017/05/13/thinking-in-java-notes-01/"/>
      <url>/2017/05/13/thinking-in-java-notes-01/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象程序设计方法">1. 面向对象程序设计方法</h1><ol><li>一切东西都是对象</li><li>程序就是一堆对象的集合，他们之间互通信息</li><li>每个对象都有自己的存储空间（即“内存资源”）</li><li>每一个对象(object)都有一种类型(class)</li><li>同一类的所有对象能够相应也响应相同的消息</li></ol><h1 id="每个对象都需要“资源”才能生存，其中最重要的一类“资源”，就是内存">2. 每个对象都需要“资源”才能生存，其中最重要的一类“资源”，就是内存</h1><h1 id="内存池-内存堆（Heap）">3. 内存池 = 内存堆（Heap）</h1><h1 id="参考书">4. 参考书</h1><ul><li>Grady    Booch 《Object-Oriented Design with Applications,第2版<br>本》</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thu-java-notes-03</title>
      <link href="/2017/05/13/thu-java-notes-03/"/>
      <url>/2017/05/13/thu-java-notes-03/</url>
      
        <content type="html"><![CDATA[<h1 id="类的复用">1. 类的复用</h1><h2 id="隐藏和覆盖">1.1. 隐藏和覆盖</h2><ol><li>必须覆盖</li><li>不能覆盖<br>+</li></ol><h3 id="相等和同一">1.1.1. 相等和同一</h3><ol><li>相等（equals）</li><li>同一（identical）</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>thu-java-notes-02</title>
      <link href="/2017/05/13/thu-java-notes-02/"/>
      <url>/2017/05/13/thu-java-notes-02/</url>
      
        <content type="html"><![CDATA[<h1 id="类的访问权限控制">1. 类的访问权限控制</h1><ul><li>public</li><li>protected  </li><li>friendly<br>同一个包中可访问</li><li>private</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>thu-intro-notes-01</title>
      <link href="/2017/05/03/thu-intro-notes-01/"/>
      <url>/2017/05/03/thu-intro-notes-01/</url>
      
        <content type="html"><![CDATA[<h1 id="电磁学">1. 电磁学</h1><ol><li>场：现代物理学核心概念（法拉第首先提出），场的概念可以类比于水流速度场（通量，环量）</li><li>场量的数学描述：<ul><li>闭合曲面的通量</li><li>闭合曲线的环量</li></ul></li><li>学习电磁学，重点要关注电磁场的性质</li></ol><h1 id="电路抽象">2. 电路抽象</h1><ol><li>基本概念：<ul><li>电压是电场的空间离散化抽象</li><li>电流是磁场的空间离散化抽象</li><li>电路分析是一大类电磁场分析的空间离散化近似</li></ul></li><li>电路的基本问题：信号与系统的相互作用关系<ul><li>基本元件：电阻/电导、电容、电感、电源</li><li>基本功能电路</li><li>基本原理</li><li>基本分析方法</li><li>基本概念</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>thu-java-notes-01</title>
      <link href="/2017/05/03/thu-java-notes-01/"/>
      <url>/2017/05/03/thu-java-notes-01/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象基本特征">1. 面向对象基本特征</h1><h2 id="抽象：">1.1. 抽象：</h2><ul><li>只关注有关方面</li><li>忽略无关方面</li></ul><h2 id="封装：-信息隐藏技术">1.2. 封装： 信息隐藏技术</h2><h2 id="继承：-通过旧类产生新类的机制">1.3. 继承： 通过旧类产生新类的机制</h2><h2 id="多态：-不同对象面对同一现象的不同反应">1.4. 多态： 不同对象面对同一现象的不同反应</h2><hr><h1 id="java-运行流程">2. java 运行流程</h1><p>java files -&gt; compiler -&gt; class files -&gt; Interpreter -&gt; output</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lab2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by emilio on 5/3/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height*width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*(height+width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计-JAVA 学习笔记01</title>
      <link href="/2017/05/01/zju-java-notes-01/"/>
      <url>/2017/05/01/zju-java-notes-01/</url>
      
        <content type="html"><![CDATA[<h1 id="对象交互">1. 对象交互</h1><h2 id="面向对象的设计思想">1.1. 面向对象的设计思想</h2><p>看问题域中包含哪些对象，他们之间的交互行为是怎样的<br>例子：数字时钟</p><h2 id="关于private-public">1.2. 关于private,public</h2><ul><li>私有的含义是对于类而言的，而不是对对象来说私有</li><li>若一个对象/函数没有private,public的访问属性限制，则这个东东被视为friendly的，即同一个包内的其他对象可以访问这一个这个成员</li></ul><h2 id="包">1.3. 包</h2><ul><li>JAVA的类管理是通过文件夹来实现的，简单来说，就是一个文件夹就是一个包，里面的若干个JAVA文件就同属于这个包的。</li><li>full name vs. given name</li></ul><h2 id="类对象和类函数">1.4. 类对象和类函数</h2><ul><li>简单来说，就是加了static修饰符的对象和函数</li><li>类对象和类函数只能被同级对象/函数访问，无法被对象变量/对象函数访问</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/04/29/hello-world/"/>
      <url>/2017/04/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start">0.1. Quick Start</h2><h3 id="Create-a-new-post">0.1.1. Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server">0.1.2. Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files">0.1.3. Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites">0.1.4. Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
